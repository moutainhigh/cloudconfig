version: '2'
services:
  gateway:
     image: "192.168.42.162:5000/gateway:1.0-SNAPSHOT"
     hostname: gateway2
     ports:
       - "8080:8080"
     networks:
       - app_net
     environment:
       - server_port=8080
       - eureka_client_service-url_defaultZone=http://eureka1:1111/eureka/,http://eureka2:1112/eureka/
  hellocontroller:
     image: "192.168.42.162:5000/hellocontroller:1.0-SNAPSHOT"
     hostname: hellocontroller2
     ports:
       - "6661:6661"
     networks:
       - app_net
     environment:
       - server_port=6661
       - eureka_client_service-url_defaultZone=http://eureka1:1111/eureka/,http://eureka2:1112/eureka/
  helloservice:
     image: "192.168.42.162:5000/helloservice:1.0-SNAPSHOT"
     hostname: helloservice2
     ports:
       - "6671:6671"
     networks:
       - app_net
     environment:
       - server_port=6671
       - eureka_client_service-url_defaultZone=http://eureka1:1111/eureka/,http://eureka2:1112/eureka/
  zipkin:
     image: "192.168.42.162:5000/zipkin:1.0-SNAPSHOT"
     hostname: zipkin2
     ports:
       - "9411:9411"
     networks:
       - app_net
     environment:
       - server_port=9411
       - eureka_client_service-url_defaultZone=http://eureka1:1111/eureka/,http://eureka2:1112/eureka/

networks:
  app_net:
    external: true
#说明： app_net是手动创建的一个公用的外部网络，执行命令：docker network create app_net
#       external: true 表示该创建的网络不是由docker-compose up 执行的时候自动创建的，是手动创建的，那么在执行docker-compose down的时候该网络不会被自动删除
#       不同的docker-compose.yml 创建的容器之间是不能通信的，实际中经常需要通信，为了达到这一目的就需要创建一个公用网络，然后不同docker-compose.yml产生的容
#       都连上这个公共网络，那么就可以实现它们的通信了。