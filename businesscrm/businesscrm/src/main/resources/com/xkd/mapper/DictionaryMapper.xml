<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xkd.mapper.DictionaryMapper" >
  <resultMap id="BaseResultMap" type="Dictionary" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="ttype" property="ttype" jdbcType="VARCHAR" />
    <result column="ttypeName" property="ttypeName" jdbcType="VARCHAR" />
    <result column="value" property="value" jdbcType="VARCHAR" />
    <result column="useCount" property="useCount" jdbcType="INTEGER" />
    <result column="parentId" property="parentId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id,parentId,ttype,ttypeName,value,useCount
  </sql>
 
  <select id="selectDictionaryById" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from dc_dictionary where id = #{id}
  </select>
 
  <select id="selectDictionaryTtypes" resultType="java.util.Map">
  
  	select distinct ttype,ttypeName,usePlace from dc_dictionary
  	where ttype is not null and ttype != '' and ttypeName is not null and ttypeName != '' and ttype !='industry'
  	<if test="pcCompanyId==null or pcCompanyId==''">
        and pcCompanyId is null
    </if>
      <if test="pcCompanyId!=null and pcCompanyId!=''">
            and  pcCompanyId is not null
      </if>
  	 group by ttype
  
  </select>
  
  <select id="selectDictionarysByTtypes" resultType="java.util.Map">
  
  	select id,parentId,ttype,ttypeName,value,useCount,usePlace from dc_dictionary where ${ttypes}
      and (pcCompanyId is null or  pcCompanyId=#{pcCompanyId})
      order by level asc
  	
  	<if test="pageSize != 0 ">
  	
    	limit #{start},#{pageSize}
    	
    </if>
  	 
  
  </select>
 
 <select id="selectDictionaryByTtypeValue" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from dc_dictionary where ttype = #{ttype}
     and (pcCompanyId is null or  pcCompanyId=#{pcCompanyId})
     and value = #{value}
  </select>

  <select id="selectMaxLevelByTtype" resultType="java.lang.Integer">
  
  	select max(level) from dc_dictionary where   (pcCompanyId is null or  pcCompanyId=#{pcCompanyId})  group by ttype having ttype = #{ttype}

  </select>

    <update id="updateDictionaryLevel">
  
  	update dc_dictionary set level = #{level} where id = #{id} 
  
  </update>
  
  <update id="clearColumnData">
  
  	${sql}
  
  </update>
  
  <delete id="deleteDictionaryById">
  
  	delete from dc_dictionary where id = #{id} 
  
  </delete>
  


  <insert id="saveDictionarys">
  
  	insert into
  	 dc_dictionary(id,ttype,level,ttypeName,value,useCount,parentId,pcCompanyId,`module`) values
  	 (uuid(),#{ttype},#{level},#{ttypeName},#{value},0,0,#{pcCompanyId},#{module})
  	
  </insert>


    <select id="selectModuleByTtype" resultType="string">
        select '公有模块' as module from dual where not EXISTS(
          select  DISTINCT d.module as module from dc_dictionary d  where d.module is not null and  d.module!=''  and d.ttype=#{ttype}
        )
         union
          select  DISTINCT d.module as module from dc_dictionary d  where d.module is not null and  d.module!=''  and d.ttype=#{ttype} limit 0,1
    </select>

    <select id="selectAllDictionaryExcludeIndustry" resultType="map">
            SELECT
                d.id,
                d.ttype,
                d.ttypeName,
                d.`value`,
                d.`level`,
                d.module,
                d.usePlace
            FROM
                dc_dictionary d
            WHERE
                d.ttype != 'industry'
            <if test="pcCompanyId==null or pcCompanyId==''">
                and d.pcCompanyId is null
            </if>
            <if test="pcCompanyId!=null and pcCompanyId!=''">
                and  d.pcCompanyId is not null
            </if>
            ORDER BY
                d.ttype,
                d.`level` ASC
    </select>





    <select id="selectAllDictionary" resultType="map">
            select
                        dc.id,
                        dc.value
             from dc_dictionary dc
    </select>



</mapper>