package com.xkd.service;

import com.xkd.mapper.CompanyMapper;
import com.xkd.model.Company;
import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class CompanyService {



	@Autowired
	private CompanyMapper companyMapper;



	@Autowired
	SolrService solrService;

	@Autowired
	UserInfoService userInfoService;
	

	@Autowired
	private CompanyRelativeUserService companyRelativeUserService;
	
	public List<Company> selectCompanyByName(String companyName,String pcCompanyId){
		
		
		List<Company> companys = companyMapper.selectCompanyByName(companyName,pcCompanyId);

		return companys;
	}
	
	

	


 

	public int updateCompanyInfoById(Map<String,Object> company) {
		
		int num = companyMapper.updateCompanyInfoById(company);
		if(null != company && null!= company.get("companyName")&&!"".equals(company.get("companyName"))){
			companyMapper.updatePagerFileName(company);
		}

		return num;
	}
	
	
	
	public int updateCompanyDetailInfoById(Map<String,Object> company) {
		
		int num = companyMapper.updateCompanyDetailInfoById(company);
		
		return num;
	}

 

	public int deleteCompanyById(String ids) {
		
		int num = companyMapper.deleteCompanyById(ids);
		
		return num;
	}

 

	public Company selectCompanyInfoById(String companyId) {
		
		Company company = companyMapper.selectCompanyInfoById(companyId);
		
		return company;
	}


	public Map<String,Object> selectCompanyById(String id){
		return companyMapper.selectCompanyById(id);
	}
 



	public List<Map<String,Object>>  searchCompanyByName(String companyName,List<String> departmentIdList,Integer start,Integer pageSize){
		return companyMapper.searchCompanyByName(companyName,departmentIdList,start,pageSize);
	}





	public Integer insertCompanyInfo(Map<String,Object> company) {
		Integer num = companyMapper.insertCompanyInfo(company);
		
		return num;
	}
	
	
	public Integer insertCompanyDetailInfo(Map<String,Object> company) {
		
		Integer num = companyMapper.insertCompanyDetailInfo(company);
		
		return num;
	}










	public Integer updateCompanyLabelById(String companyId, String label) {
		
	Integer num = companyMapper.updateCompanyLabelById(companyId,label);
	
	return num;
}




	
	






	public 	void deleteByCompanyById(String id){
		companyMapper.deleteByCompanyById(id);
	}
	public List<String> selecAllCompanyId(){
		return companyMapper.selecAllCompanyId();
	}


	public boolean isRelativePermission(String companyId,String userId){

		boolean relativeFlag=false;
		List<String> companyIdList=new ArrayList<>();
		companyIdList.add(companyId);
		List<Map<String,Object>> relativeUserList=companyRelativeUserService.selectRelativeUserListByCompanyIds(companyIdList);
		for (int i = 0; i <relativeUserList.size() ; i++) { //判断相关人员权限
			if (userId!=null&&userId.equals(relativeUserList.get(i).get("userId"))){
				relativeFlag=true;
			}
		}
		return  relativeFlag;
	}



	public void updateInfoScore(String companyId){
		Company company=companyMapper.selectCompanyInfoById(companyId);
		List<Map<String,Object>> userInfos=   userInfoService.selectUserInfoByCompanyId(companyId);
		Integer v_establishTime=StringUtils.isBlank(company.getEstablishTime())?0:1;
		Integer v_registerMoney=StringUtils.isBlank(company.getRegisteredMoney())?0:1;
		Integer v_econKind=StringUtils.isBlank(company.getEconKind())?0:1;
		Integer v_socialCredit=StringUtils.isBlank(company.getSocialCredit())?0:1;
		Integer v_representative=StringUtils.isBlank(company.getRepresentative())?0:1;
		Integer v_address=StringUtils.isBlank(company.getAddress())?0:1;
		Integer v_manageScope=StringUtils.isBlank(company.getManageScope())?0:1;
		Integer v_label=StringUtils.isBlank(company.getLabel())?0:1;
		Integer v_annualSalesVolume=StringUtils.isBlank(company.getAnnualSalesVolume())?0:1;
		Integer v_annualProfit=StringUtils.isBlank(company.getAnnualProfit())?0:1;
		Integer v_thisYearSalesVolume=StringUtils.isBlank(company.getThisYearSalesVolume())?0:1;
		Integer v_nextYearSalesVolume=StringUtils.isBlank(company.getNextYearSalesVolume())?0:1;
		Integer v_businessScope=StringUtils.isBlank(company.getBusinessScope())?0:1;
		Integer v_companySize=StringUtils.isBlank(company.getCompanySize())?0:1;
		Integer v_companyPosition=StringUtils.isBlank(company.getCompanyPosition())?0:1;
		Integer v_hasResource=StringUtils.isBlank(company.getHasResource())?0:1;
		Integer v_needResource=StringUtils.isBlank(company.getNeedResource())?0:1;
 		Integer v_userInfo=userInfos.size()>0?1:0;

		Integer score=v_establishTime*2+v_registerMoney*2
				+v_econKind*2+v_socialCredit*2
				+v_representative*2+v_address*2
				+v_manageScope*2
				+v_label*10+v_annualSalesVolume*5
				+v_annualProfit*5+v_thisYearSalesVolume*5
				+v_nextYearSalesVolume*5+v_businessScope*5
				+v_companySize*5+v_companyPosition*5
				+v_hasResource*5+v_needResource*5
				+v_userInfo*6;

		 Map<String,Object> companyMap=new HashMap<>();
		companyMap.put("id",companyId);
		companyMap.put("infoScore",score);
		companyMapper.updateCompanyInfoById(companyMap);

	}


	public List<Map<String,Object>> selectCompanyInfoByIdList(@Param("idList")List<String> idList){
		if (idList.size()==0){
			return new ArrayList<>()
					;
		}
		return companyMapper.selectCompanyInfoByIdList(idList);
	}



	public List<String> selectSolrCompanyIdsByDepartmentIdsAndOperate(List<String> departmentIdList,Integer operate, Integer start,Integer pageSize){
		return companyMapper.selectSolrCompanyIdsByDepartmentIdsAndOperate(departmentIdList,operate, start, pageSize);
	}

	public int deleteSolrCompanyIds(List<String> idList,Integer Operate){
		return companyMapper.deleteSolrCompanyIds(idList,Operate);
	}

	public int insertDcSolrCompany( List<String> departmentIdList,Integer operate){
		return companyMapper.insertDcSolrCompany(departmentIdList,operate);
	}






	public List<String> selectAllCompanyIds(){
		return companyMapper.selectAllCompanyIds();
	}

	public List<Map<String,Object>> selectCompanyByNameUnDeleted(String companyName,String pcCompanyId){
		return companyMapper.selectCompanyByNameUnDeleted(companyName,pcCompanyId);
	}



}
